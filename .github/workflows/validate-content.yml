name: Validate Content

on:
  pull_request:
    paths:
      - "content/**"
      - "static/**"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: "latest"
          extended: true

      - name: Validate frontmatter
        run: |
          # Better frontmatter validation
          errors=0
          for file in $(find content -name "*.md"); do
            # Check if file has frontmatter
            if ! grep -q "^---$" "$file"; then
              echo "Missing frontmatter: $file"
              errors=$((errors + 1))
              continue
            fi
            
            # Extract frontmatter and check required fields
            frontmatter=$(sed -n '/^---$/,/^---$/p' "$file" | sed '1d;$d')
            
            if ! echo "$frontmatter" | grep -q "^title:"; then
              echo "Missing title in: $file"
              errors=$((errors + 1))
            fi
            
            if ! echo "$frontmatter" | grep -q "^date:"; then
              echo "Missing date in: $file"
              errors=$((errors + 1))
            fi
          done

          if [ $errors -gt 0 ]; then
            echo "Found $errors frontmatter errors"
            exit 1
          fi

      - name: Check for broken internal links
        run: |
          hugo --buildDrafts --buildFuture

          # Use hugo's built-in link checking or htmlproofer
          # For now, just ensure build succeeds
          if [ ! -d "public" ]; then
            echo "Hugo build failed - no public directory created"
            exit 1
          fi

      - name: Validate images
        run: |
          # Check if referenced images exist
          find content -name "*.md" -exec grep -oP '(?<=featured_image: ")[^"]*' {} \; > image-refs.txt

          missing_images=""
          while IFS= read -r image; do
            if [ ! -f "static/$image" ] && [ ! -f "themes/neurotech-theme/static/$image" ]; then
              missing_images="$missing_images\n$image"
            fi
          done < image-refs.txt

          if [ ! -z "$missing_images" ]; then
            echo "Missing image files:"
            echo -e "$missing_images"
            echo "Note: This is a warning, not blocking deployment"
          fi
